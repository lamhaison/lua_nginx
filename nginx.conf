worker_processes  1;
error_log /var/log/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;

	location /redirect {
		content_by_lua '
			return ngx.redirect("/hello");
		';

	}

        location /hello {
		set_unescape_uri $name $arg_name;
            	set_if_empty $name "Anonymous";
            	echo "Hello, $name!";
        }

	location /hellolua {
    		default_type 'text/plain';

    		content_by_lua '
        		local name = ngx.var.arg_name or "Anonymous"
        		ngx.say("Hello, ", name, "!")
    		';
	}

	location /memcached {
    		set $memc_cmd $arg_cmd;
   		set $memc_key $arg_key;
    		set $memc_value $arg_val;
    		set $memc_exptime $arg_exptime;
    		memc_pass 127.0.0.1:11211;
	}

	location / {
    		content_by_lua '
        		local res = ngx.location.capture("/sub")
        		if res.status >= 500 then 
           		 ngx.exit(res.status) 
        		end
        		ngx.status = res.status
        		ngx.say(res.body)
    		';
	}

	location /sub {
    		echo "Hello, Sub-Request!";
	}

	location /setmemcachelua {
    		content_by_lua '
        		local res = ngx.location.capture("/memcachedlua",
            			{ args = { cmd = "incr", key = ngx.var.uri } }
        		)
    		';
	}

	location /memcachedlua{
    		set $memc_cmd $arg_cmd;
    		set $memc_key $arg_key;
    		memc_pass 127.0.0.1:11211;
	}
	
        location /redis {
            content_by_lua '
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
		--local ok, err = red:connect("unix:/tmp/redis.sock")
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            ';
        }
    }
}
