server {
        listen 8080;

	#location /rewrite_by {
	#	rewrite_by_lua "ngx.var.toggle = true";
	#	if ($toggle) {
	#		rewrite / /redirect;
	#	}
	#}

	#location /var {
	#	set $a True;
		# rewrite_by_lua "ngx.var.b = ngx.var.a .. 'beta'";
	#	if ($a) {
	#		proxy_pass http://210.245.17.188:8092;
	#	} 
	#	echo $b;
	#}

	location /proxy {
     		rewrite_by_lua '
			local token = ngx.var.arg_token
			-- ngx.print(token)
         		local uri = ngx.re.sub(ngx.var.uri, "^/proxy/(.*)", "/$1", "o")
			if token == "mytoken" then
         			ngx.req.set_uri(uri)
			else
				-- ngx.print("you do not have permission to access")
				-- ngx.exit(ngx.HTTP_FORBIDDEN)
				ngx.redirect("/fallback/404_error.html")
			end
     		';
     		proxy_pass http://210.245.17.188:8092;
 	}	

	root /var/www/main;
	location / {
		rewrite ^/rewriteme/(.*)$ /$1 last;
    		try_files $uri $uri.html $uri/ /fallback/index.html;
	}

	location /fallback {
    		root /var/www/another;
		error_page 404 /fallback/404_error.html;
	}

	location /access_by {
		access_by_lua "ngx.exit(ngx.var.arg_status)";
	}

	location /deny {
		deny all;
		echo "You do not have permission";
	}
	location /allow {
		content_by_lua '
			ngx.say(ngx.var.requests_uri)
		';
		# echo "You have permission to access";
	}

	location /redirect {
		content_by_lua_file "/etc/nginx/scripts/redirect.lua";

	}

	location /streaming_proxy/ {
		proxy_pass http://210.245.17.188:8092;
	}
	
	location ^~ /stream {
		rewrite_by_lua '
			local token = ngx.var.arg_token
			if token == "mytoken" then
				-- ngx.print("true token")
				ngx.req.set_uri("/allow", true)
			else
				-- ngx.print("fail token")
				ngx.req.set_uri("/deny", true)
			end
			
		';
		# rewrite_by_lua "ngx.var.flag = ngx.var.flag_true";
		#if ($flag = $flag_true) {	
		#	proxy_pass http://210.245.17.188:8092;
		#	break;
		#}
		#echo "You do not have permission: $flag";
	}
	
	#location /streaming/ {
	#	content_by_lua '
        #                local name = ngx.var.arg_name
        #                if name == "sonlh" then
        #               		ngx.say("Do not permision to access")
	#			ngx.exit(0)
        #                end
	#		-- ngx.redirect("^~ /stream")
	#		ngx.say(nginx.var.request_uri)
        #        ';
	#	# proxy_pass http://210.245.17.188:8092/;
	#}

	location /redirectadmin {
		proxy_pass http://localhost:8086/admin;
	}

	location /admin {
		proxy_pass http://localhost:8086/admin;
	}

	#location /admin {
	#	content_by_lua '
	#		ngx.say("Do not permision to access")
	#	';
	#}


        #location /hello {
	#	set_unescape_uri $name $arg_name;
        #    	set_if_empty $name "Anonymous";
        #    	echo "Hello, $name!";
        #}

	location /hellolua {
    		default_type 'text/plain';

    		content_by_lua '
        		local name = ngx.var.arg_name or "Anonymous"
        		ngx.say("Hello, ", name, "!")
    		';
	}

	location /memcached {
    		set $memc_cmd $arg_cmd;
   		set $memc_key $arg_key;
    		set $memc_value $arg_val;
    		set $memc_exptime $arg_exptime;
    		memc_pass 127.0.0.1:11211;
	}

	#location / {
    	#	content_by_lua '
        #		local res = ngx.location.capture("/sub")
        #		if res.status >= 500 then 
        #   		 ngx.exit(res.status) 
        #		end
        #		ngx.status = res.status
        #		ngx.say(res.body)
    	#	';
	#}

	location /sub {
    		echo "Hello, Sub-Request!";
	}

	location /setmemcachelua {
    		content_by_lua '
        		local res = ngx.location.capture("/memcachedlua",
            			{ args = { cmd = "incr", key = ngx.var.uri } }
        		)
    		';
	}

	location /memcachedlua{
    		set $memc_cmd $arg_cmd;
    		set $memc_key $arg_key;
    		memc_pass 127.0.0.1:11211;
	}
	
        location /redis {
            content_by_lua '
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
		--local ok, err = red:connect("unix:/tmp/redis.sock")
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            ';
	}
}
